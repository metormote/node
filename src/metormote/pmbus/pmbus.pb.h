/* Automatically generated nanopb header */
/* Generated by nanopb-0.1.9-dev at Fri Jan 18 14:24:46 2013. */

#ifndef _PB_PMBUS_PB_H_
#define _PB_PMBUS_PB_H_
#include <pb.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _pmbus_CommandCode {
    pmbus_CommandCode_PAGE = 0,
    pmbus_CommandCode_OPERATION = 1,
    pmbus_CommandCode_ON_OFF_CONFIG = 2,
    pmbus_CommandCode_CLEAR_FAULTS = 3,
    pmbus_CommandCode_PHASE = 4,
    pmbus_CommandCode_WRITE_PROTECT = 16,
    pmbus_CommandCode_STORE_DEFAULT_ALL = 17,
    pmbus_CommandCode_RESTORE_DEFAULT_ALL = 18,
    pmbus_CommandCode_STORE_DEFAULT_CODE = 19,
    pmbus_CommandCode_RESTORE_DEFAULT_CODE = 20,
    pmbus_CommandCode_STORE_USER_ALL = 21,
    pmbus_CommandCode_RESTORE_USER_ALL = 22,
    pmbus_CommandCode_STORE_USER_CODE = 23,
    pmbus_CommandCode_RESTORE_USER_CODE = 24,
    pmbus_CommandCode_CAPABILITY = 25,
    pmbus_CommandCode_QUERY = 26,
    pmbus_CommandCode_VOUT_MODE = 32,
    pmbus_CommandCode_VOUT_COMMAND = 33,
    pmbus_CommandCode_VOUT_TRIM = 34,
    pmbus_CommandCode_VOUT_CAL_OFFSET = 35,
    pmbus_CommandCode_VOUT_MAX = 36,
    pmbus_CommandCode_VOUT_MARGIN_HIG = 37,
    pmbus_CommandCode_VOUT_MARGIN_LOW = 38,
    pmbus_CommandCode_VOUT_TRANSITION_RATE = 39,
    pmbus_CommandCode_VOUT_DROOP = 40,
    pmbus_CommandCode_VOUT_SCALE_LOOP = 41,
    pmbus_CommandCode_VOUT_SCALE_MONITOR = 42,
    pmbus_CommandCode_COEFFICIENTS = 48,
    pmbus_CommandCode_POUT_MAX = 49,
    pmbus_CommandCode_MAX_DUTY = 50,
    pmbus_CommandCode_FREQUENCY_SWITC = 51,
    pmbus_CommandCode_VIN_ON = 53,
    pmbus_CommandCode_VIN_OFF = 54,
    pmbus_CommandCode_INTERLEAVE = 55,
    pmbus_CommandCode_IOUT_CAL_GAIN = 56,
    pmbus_CommandCode_IOUT_CAL_OFFSET = 57,
    pmbus_CommandCode_FAN_CONFIG_1_2 = 58,
    pmbus_CommandCode_FAN_COMMAND_1 = 59,
    pmbus_CommandCode_FAN_COMMAND_2 = 60,
    pmbus_CommandCode_FAN_CONFIG_3_4 = 61,
    pmbus_CommandCode_FAN_COMMAND_3 = 62,
    pmbus_CommandCode_FAN_COMMAND_4 = 63,
    pmbus_CommandCode_VOUT_OV_FAULT_LIMIT = 64,
    pmbus_CommandCode_VOUT_OV_FAULT_RESPONSE = 65,
    pmbus_CommandCode_VOUT_OV_WARN_LIMIT = 66,
    pmbus_CommandCode_VOUT_UV_WARN_LIMIT = 67,
    pmbus_CommandCode_VOUT_UV_FAULT_LIMIT = 68,
    pmbus_CommandCode_VOUT_UV_FAULT_RESPONSE = 69,
    pmbus_CommandCode_IOUT_OC_FAULT_LIMIT = 70,
    pmbus_CommandCode_IOUT_OC_FAULT_RESPONSE = 71,
    pmbus_CommandCode_IOUT_OC_LV_FAULT_LIMIT = 72,
    pmbus_CommandCode_IOUT_OC_LV_FAULT_RESPONSE = 73,
    pmbus_CommandCode_IOUT_OC_WARN_LIMIT = 74,
    pmbus_CommandCode_IOUT_UC_FAULT_LIMIT = 75,
    pmbus_CommandCode_IOUT_UC_FAULT_RESPONSE = 76,
    pmbus_CommandCode_OT_FAULT_LIMIT = 79,
    pmbus_CommandCode_OT_FAULT_RESPONSE = 80,
    pmbus_CommandCode_OT_WARN_LIMIT = 81,
    pmbus_CommandCode_UT_WARN_LIMIT = 82,
    pmbus_CommandCode_UT_FAULT_LIMIT = 83,
    pmbus_CommandCode_UT_FAULT_RESPONSE = 84,
    pmbus_CommandCode_VIN_OV_FAULT_LIMIT = 85,
    pmbus_CommandCode_VIN_OV_FAULT_RESPONSE = 86,
    pmbus_CommandCode_VIN_OV_WARN_LIMIT = 87,
    pmbus_CommandCode_VIN_UV_WARN_LIMIT = 88,
    pmbus_CommandCode_VIN_UV_FAULT_LIMIT = 89,
    pmbus_CommandCode_VIN_UV_FAULT_RESPONSE = 90,
    pmbus_CommandCode_IIN_OC_FAULT_LIMIT = 91,
    pmbus_CommandCode_IIN_OC_FAULT_RESPONSE = 92,
    pmbus_CommandCode_IIN_OC_WARN_LIMIT = 93,
    pmbus_CommandCode_POWER_GOOD_ON = 94,
    pmbus_CommandCode_POWER_GOOD_OFF = 95,
    pmbus_CommandCode_TON_DELAY = 96,
    pmbus_CommandCode_TON_RISE = 97,
    pmbus_CommandCode_TON_MAX_FAULT_LIMIT = 98,
    pmbus_CommandCode_TON_MAX_FAULT_RESPONSE = 99,
    pmbus_CommandCode_TOFF_DELAY = 100,
    pmbus_CommandCode_TOFF_FALL = 101,
    pmbus_CommandCode_TOFF_MAX_WARN_LIMIT = 102,
    pmbus_CommandCode_POUT_OP_FAULT_LIMIT = 104,
    pmbus_CommandCode_POUT_OP_FAULT_RESPONSE = 105,
    pmbus_CommandCode_POUT_OP_WARN_LIMIT = 106,
    pmbus_CommandCode_PIN_OP_WARN_LIMIT = 107,
    pmbus_CommandCode_STATUS_BYTE = 120,
    pmbus_CommandCode_STATUS_WORD = 121,
    pmbus_CommandCode_STATUS_VOUT = 122,
    pmbus_CommandCode_STATUS_IOUT = 123,
    pmbus_CommandCode_STATUS_INPUT = 124,
    pmbus_CommandCode_STATUS_TEMPERATURE = 125,
    pmbus_CommandCode_STATUS_CML = 126,
    pmbus_CommandCode_STATUS_OTHER = 127,
    pmbus_CommandCode_STATUS_MFR_SPECIFIC = 128,
    pmbus_CommandCode_STATUS_FANS_1_2 = 129,
    pmbus_CommandCode_STATUS_FANS_3_4 = 130,
    pmbus_CommandCode_READ_VIN = 136,
    pmbus_CommandCode_READ_IIN = 137,
    pmbus_CommandCode_READ_VCAP = 138,
    pmbus_CommandCode_READ_VOUT = 139,
    pmbus_CommandCode_READ_IOUT = 140,
    pmbus_CommandCode_READ_TEMPERATURE_1 = 141,
    pmbus_CommandCode_READ_TEMPERATURE_2 = 142,
    pmbus_CommandCode_READ_TEMPERATURE_3 = 143,
    pmbus_CommandCode_READ_FAN_SPEED_1 = 144,
    pmbus_CommandCode_READ_FAN_SPEED_2 = 145,
    pmbus_CommandCode_READ_FAN_SPEED_3 = 146,
    pmbus_CommandCode_READ_FAN_SPEED_4 = 147,
    pmbus_CommandCode_READ_DUTY_CYCLE = 148,
    pmbus_CommandCode_READ_FREQUENCY = 149,
    pmbus_CommandCode_READ_POUT = 150,
    pmbus_CommandCode_READ_PIN = 151,
    pmbus_CommandCode_PMBUS_REVISION = 152,
    pmbus_CommandCode_MFR_ID = 153,
    pmbus_CommandCode_MFR_MODEL = 154,
    pmbus_CommandCode_MFR_REVISION = 155,
    pmbus_CommandCode_MFR_LOCATION = 156,
    pmbus_CommandCode_MFR_DATE = 157,
    pmbus_CommandCode_MFR_SERIAL = 158,
    pmbus_CommandCode_MFR_VIN_MIN = 160,
    pmbus_CommandCode_MFR_VIN_MAX = 161,
    pmbus_CommandCode_MFR_IIN_MAX = 162,
    pmbus_CommandCode_MFR_PIN_MAX = 163,
    pmbus_CommandCode_MFR_VOUT_MIN = 164,
    pmbus_CommandCode_MFR_VOUT_MAX = 165,
    pmbus_CommandCode_MFR_IOUT_MAX = 166,
    pmbus_CommandCode_MFR_POUT_MAX = 167,
    pmbus_CommandCode_MFR_TAMBIENT_MAX = 168,
    pmbus_CommandCode_MFR_TAMBIENT_MIN = 169,
    pmbus_CommandCode_MFR_EFFICIENCY_LL = 170,
    pmbus_CommandCode_MFR_EFFICIENCY_HL = 171,
    pmbus_CommandCode_USER_DATA_00 = 176,
    pmbus_CommandCode_USER_DATA_15 = 191,
    pmbus_CommandCode_MFR_SPECIFIC_00 = 208,
    pmbus_CommandCode_MFR_SPECIFIC_45 = 253,
    pmbus_CommandCode_MFR_SPECIFIC_COMMAND_EXT = 254,
    pmbus_CommandCode_PMBUS_COMMAND_EXT = 255
} pmbus_CommandCode;

typedef enum _pmbus_Command_Type {
    pmbus_Command_Type_READ = 0,
    pmbus_Command_Type_WRITE = 1
} pmbus_Command_Type;

typedef enum _pmbus_Response_Error {
    pmbus_Response_Error_BUSY = 0,
    pmbus_Response_Error_IO_ERR = 1,
    pmbus_Response_Error_INVALID = 2
} pmbus_Response_Error;

/* Struct definitions */
typedef struct _pmbus_Command {
    pmbus_Command_Type type;
    uint32_t code;
    uint32_t responseLen;
    pb_callback_t data;
} pmbus_Command;

typedef struct _pmbus_In {
    uint32_t pmbusAddress;
    pb_callback_t command;
} pmbus_In;

typedef struct _pmbus_Out {
    uint32_t pmbusAddress;
    pb_callback_t response;
} pmbus_Out;

typedef struct _pmbus_Response {
    uint32_t code;
    pb_callback_t data;
    bool has_error;
    pmbus_Response_Error error;
} pmbus_Response;

/* Default values for struct fields */

/* Struct field encoding specification for nanopb */
extern const pb_field_t pmbus_In_fields[3];
extern const pb_field_t pmbus_Out_fields[3];
extern const pb_field_t pmbus_Command_fields[5];
extern const pb_field_t pmbus_Response_fields[4];

/* Check that field information fits in pb_field_t */
#if !defined(PB_FIELD_16BIT) && !defined(PB_FIELD_32BIT)
STATIC_ASSERT((pb_membersize(pmbus_In, command) < 256 && pb_membersize(pmbus_Out, response) < 256), YOU_MUST_DEFINE_PB_FIELD_16BIT_FOR_MESSAGES_pmbus_In_pmbus_Out_pmbus_Command_pmbus_Response)
#endif

#if !defined(PB_FIELD_32BIT)
STATIC_ASSERT((pb_membersize(pmbus_In, command) < 65536 && pb_membersize(pmbus_Out, response) < 65536), YOU_MUST_DEFINE_PB_FIELD_32BIT_FOR_MESSAGES_pmbus_In_pmbus_Out_pmbus_Command_pmbus_Response)
#endif

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif